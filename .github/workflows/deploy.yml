name: Deploy to Server

on:
  push:
    branches: [ main ]  # 当推送到 main 分支时触发

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
     # 缓存 Docker 层
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Deploy to Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          # 检查项目目录是否存在
          if [ ! -d "/www/video_conference_server" ]; then
            # 如果目录不存在，创建目录并克隆仓库
            mkdir -p /www/video_conference_server
            cd /www
            git clone https://github.com/kaijierepo/video_conference_server.git
          else
            # 如果目录存在，进入目录并拉取更新
            cd /www/video_conference_server
            git fetch --all
            git reset --hard origin/main
          fi

          # 创建或更新 .env 文件
          echo "MEDIASOUP_ANNOUNCED_IP=${{ secrets.MEDIASOUP_ANNOUNCED_IP }}" > .env
          echo "MONGODB_URI=mongodb://mongodb:27017/video_conference" >> .env
          
          # 检查 Dockerfile.app 是否存在
          if [ ! -f "Dockerfile.app" ]; then
            echo "Dockerfile.app not found!"
            exit 1
          fi
          
          # 构建新的 Docker 镜像
          docker build -t nestjs-app:latest -f Dockerfile.app . || exit 1
          
          # 停止并删除旧容器（忽略错误）
          docker stop app-container || true
          docker rm app-container || true
          
          # 启动新容器（使用 PM2）
          docker run -d \
            --name app-container \
            -p 3000:3000 \
            --restart unless-stopped \
            nestjs-app:latest

