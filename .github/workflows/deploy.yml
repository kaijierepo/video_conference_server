name: Deploy to Server

on:
  push:
    branches: [ main ]  # 当推送到 main 分支时触发

jobs:
  deploy:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          # 检查项目目录是否存在
          if [ ! -d "/www/video_conference_server" ]; then
            # 如果目录不存在，创建目录并克隆仓库
            mkdir -p /www/video_conference_server
            cd /www
            git clone https://github.com/kaijierepo/video_conference_server.git
          else
            # 如果目录存在，进入目录并拉取更新
            cd /www/video_conference_server
            git fetch --all
            git reset --hard origin/main
          fi

          # 创建或更新 .env 文件
          echo "MEDIASOUP_ANNOUNCED_IP=${{ secrets.MEDIASOUP_ANNOUNCED_IP }}" > .env
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
          
          # 检查 Dockerfile.app 是否存在
          if [ ! -f "Dockerfile.app" ]; then
            echo "Dockerfile.app not found!"
            exit 1
          fi
          
          # 确保网络存在（使用更可靠的方式）
          echo "Setting up network..."
          docker network rm app-network || true
          docker network create app-network || {
            echo "Failed to create network"
            echo "Current networks:"
            docker network ls
            echo "Trying to create network with specific driver..."
            docker network create --driver bridge app-network || {
              echo "Failed to create network with bridge driver"
              exit 1
            }
          }

          # 验证网络创建
          echo "Verifying network..."
          docker network inspect app-network || {
            echo "Network verification failed"
            exit 1
          }

          # 清理所有未使用的构建缓存
          echo "Cleaning up Docker..."
          docker builder prune -f
          docker system prune -f
          
          
          # 构建新的应用镜像
          echo "Building new image..."
          docker build -t nestjs-app:latest -f Dockerfile.app . || {
            echo "Failed to build image"
            exit 1
          }

          # 停止并删除旧容器（如果存在）
          echo "Removing old container..."
          docker stop app-container || true
          docker rm app-container || true
          
          # 启动应用容器（添加更多错误处理）
          echo "Starting new container..."
          docker run -d \
            --name app-container \
            --network app-network \
            -p 3000:3000 \
            --restart unless-stopped \
            -e MEDIASOUP_ANNOUNCED_IP=${{ secrets.MEDIASOUP_ANNOUNCED_IP }} \
            -e MONGODB_URI=${{ secrets.MONGODB_URI }} \
            -e NODE_ENV=production \
            nestjs-app:latest || {
              echo "Failed to start container"
              echo "Network status:"
              docker network ls
              echo "Container status:"
              docker ps -a
              echo "Container logs:"
              docker logs app-container || true
              exit 1
            }
          
          # 等待应用启动
          echo "Waiting for container to start..."
          sleep 10
          
          # 验证容器状态
          echo "Checking container status..."
          docker ps
          docker inspect app-container || {
            echo "Container inspection failed"
            exit 1
          }
          
          # 查看容器日志
          echo "Container logs:"
          docker logs --tail 50 app-container
        

